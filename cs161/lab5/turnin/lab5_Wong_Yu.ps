%!PS-Adobe-3.0
%%Title: lab5_report.txt, dpd_adder.vhd, dpd_to_bcd.vhd, lab5_tb.vhd
%%For: Christopher Wong
%%Creator: a2ps version 4.13
%%CreationDate: Mon May 21 13:23:57 2012
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 5
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% composite fonts for ASCII-EUC mixed string
% Version 1.2 1/31/1990
% Orignal Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.060185 def
/cw 4.236111 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 86.400000 mul
def
/ph
   520.335631 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 5 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (Names: Chris Wong , Allen Yu) p n
(2) # (Login:  wongc, yua) N
(3) # (Email: cwong030@student.ucr.edu , yua@cs.ucr.edu) N
(4) # (Lab Section: 022) N
(5) # (Assignment: Lab 5) N
(6) # (I acknowledge all content is original.) N
(7) # () N
(8) # (Lab Objective) N
(9) # (    The objective of this lab was to familiarize us with the addition of) N
(10) # (Binary Coded Decimals and conversion of the Densely Packed Decimal to the ) N
(11) # (Binary Coded Decimal.) N
(12) # () N
(13) # () N
(14) # (Personal Contributions) N
(15) # () S 8 T ( Allen - 50%. Chris - 50%. We both contributed to an equal amount of) N
(16) # (work in this lab. We worked on one program together and explained to eachother) N
(17) # (how the lab assignment should work. ) N
(18) # () N
(19) # () N
(20) # (Skill Learned & Knowledge Gained) N
(21) # (      We learned to code in VHDL a lot better than before. We learned how) N
(22) # (the addition of Binary Coded Decimals worked with full adders. We learned how) N
(23) # (to convert from DPDs to BCD in VHDL.) N
(24) # () N
(25) # () N
(26) # (Known Bugs Location) N
(27) # (      We had a  problem synthesizing in Xilinx where it said that we needed to) N
(28) # (contact technical support. We figured out that it was our syntax or coding ) N
(29) # (style that generated this error. We were initializing a signal inside a process) N
(30) # (where it shouldn't be.) N
(31) # () N
(32) # () N
(33) # (Feedback on the Lab) N
(34) # (      Lab 5 was very straight forward. It was very easy to understand the) N
(35) # (material since we went over it in the 161L lecture. There was no problem) N
(36) # (completing this lab within the 3 hour lab time. ) N
(lab5_report.txt) (Page 1/1) (May 21, 12 13:21) title
border
grestore
(Printed by Christopher Wong) rhead
(lab5_report.txt) (1/5) (Monday May 21, 2012) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (--------------------------------------------------------------------------------) c n
0 T (--) N
(2) # (--Names: Chris Wong , Allen Yu) N
(3) # (--Login:  wongc, yua) N
(4) # (--Email: cwong030@student.ucr.edu , yua@cs.ucr.edu) N
(5) # (--Lab Section: 022) N
(6) # (--Assignment: Lab 5) N
(7) # (--I acknowledge all content is original.) N
(8) # (--------------------------------------------------------------------------------) N
0 T (--) N
(9) # () N
(10) # () S
(library ) K
(IEEE) l
(;) p n
(11) # () S
(use) K
( IEEE.STD_LOGIC_1164.) p
(ALL) K
(;) p n
(12) # () S
(use) K
( IEEE.STD_LOGIC_UNSIGNED.) p
(ALL) K
(;) p n
(13) # () N
(14) # () S
(entity) K
( ) p
(bcd_full_adder) l
( ) p
(is) K n
(15) # () S
() p 8 T () S
(port) K
(\() p n
(16) # () S 8 T () S 16 T (val_1) S 24 T () S 32 T (: ) S
(in) K
( std_logic_vector\(3 ) p
(downto) K
( 0\);) p n
(17) # () S 8 T () S 16 T (val_2) S 24 T () S 32 T (: ) S
(in) K
( std_logic_vector\(3 ) p
(downto) K
( 0\);) p n
(18) # () S 8 T () S 16 T (c_in) S 24 T () S 32 T (: ) S
(in) K
( std_logic;) p n
(19) # () S 8 T () S 16 T () N
(20) # () S 8 T () S 16 T (result) S 24 T (: ) S
(out) K
( std_logic_vector\(3 ) p
(downto) K
( 0\);) p n
(21) # () S 8 T () S 16 T (c_out) S 24 T () S 32 T (: ) S
(out) K
( std_logic) p n
(22) # () S 8 T (\);) N
(23) # () S
(end) K
( bcd_full_adder;) p n
(24) # () N
(25) # () S
(architecture) K
( Behavioral ) p
(of) K
( bcd_full_adder ) p
(is) K n
(26) # (signal) S
( result_sig ) p 24 T (: std_logic_vector\( 3 ) S
(downto) K
( 0 \);) p n
(27) # () S 8 T () S
(signal) K
( c_out_sig) p 32 T () S 40 T () S 48 T (: std_logic;) N
(28) # () S 8 T () S
(signal) K
( c_in_temp ) p 32 T () S 40 T (: std_logic_vector\(3 ) S
(downto) K
( 0\);) p n
(29) # () S 8 T () S
(constant) K
( weird) p 24 T () S 32 T (: std_logic_vector\(2 ) S
(downto) K
( 0\) := ") p
(000) str
(";) p n
(30) # () S 8 T () N
(31) # () S
(begin) K n
(32) # () N
(33) # () N
(34) # () S
() p 8 T (c_in_temp <= weird & c_in;) N
(35) # () N
(36) # () N
(37) # () N
(38) # () S 8 T (adding: ) S
(process) K
(\(val_1,val_2, c_in_temp \)) p n
(39) # () S 8 T () S 16 T () S
(begin) K
() p 24 T () N
(40) # () S 8 T () S 16 T () S 24 T (result_sig <= val_1 + val_2 + c_in_temp;) N
(41) # () S 8 T () S 16 T () S
(end) K
( ) p
(process) K
(;) p n
(42) # () S 8 T () S 16 T () N
(43) # () S 8 T (carryout: ) S
(process) K
(\(result_sig\)) p n
(44) # () S 8 T () S 16 T () S
(begin) K n
(45) # () S
() p 8 T () S 16 T () S 24 T () S
(if) K
(\(result_sig = ") p
(1010) str
(" ) p
(or) K
( result_sig = ") p
(1011) str
(" ) p
(or) K
( result_s) p n
0 T (ig = ") S
(1100) str
(" ) p
(or) K
( result_sig = ") p
(1101) str
(" ) p
(or) K
( result_sig = ") p
(1110) str
(" ) p
(or) K
( result_sig = ") p
(1111) str
("\) ) p
() K n
0 T (then) N
(46) # () S
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T (c_out_sig <= ') S
(1) str
(';) p n
(47) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (result <= result_sig - ") S
(1010) str
(";) p n
(48) # () S 8 T () S 16 T () S 24 T () S 32 T () S
(else) K n
(49) # () S
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T (c_out_sig <= ') S
(0) str
(';) p 64 T () N
(50) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (result <= result_sig;) N
(51) # () S 8 T () S 16 T () S 24 T () S
(end) K
( ) p
(if) K
(;) p n
(52) # () S 8 T () S 16 T () S
(end) K
( ) p
(process) K
(;) p n
(53) # () N
(54) # () S 8 T () N
(55) # () S 8 T (c_out <= c_out_sig;) N
(56) # () S 8 T () S 16 T () N
(57) # () S
(end) K
( Behavioral;) p n
(58) # () N
(59) # () N
(60) # () N
(61) # () N
(62) # () N
(63) # () S
(-- DO NOT MODIFY BELOW THIS LINE) c n
(64) # (-- ---------- ---------- --------- ---------- ---------- ----------) N
(65) # () S
(library ) K
(IEEE) l
(;) p n
(66) # () S
(use) K
( IEEE.STD_LOGIC_1164.) p
(ALL) K
(;) p n
(67) # () N
(68) # () S
(entity) K
( ) p
(bcd_3_digit_adder) l
( ) p
(is) K n
(69) # () S
() p 8 T () S
(port) K
(\() p n
(dpd_adder.vhd) (Page 1/3) (May 21, 12 13:21) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(70) # () p 8 T () S 16 T (val_1) S 24 T (: ) S
(in) K
( std_logic_vector\(11 ) p
(downto) K
( 0\);) p n
(71) # () S 8 T () S 16 T (val_2 : ) S
(in) K
( std_logic_vector\(11 ) p
(downto) K
( 0\);) p n
(72) # () S 8 T () S 16 T (c_in) S 24 T (: ) S
(in) K
( std_logic;) p n
(73) # () S 8 T () S 16 T () N
(74) # () S 8 T () S 16 T (result) S 24 T (: ) S
(out) K
( std_logic_vector\(11 ) p
(downto) K
( 0\);) p n
(75) # () S 8 T () S 16 T (c_out) S 24 T () S 32 T (: ) S
(out) K
() p 40 T (std_logic) N
(76) # () S 8 T (\);) N
(77) # () S
(end) K
( bcd_3_digit_adder;) p n
(78) # () N
(79) # () S
(architecture) K
( Behavioral ) p
(of) K
( bcd_3_digit_adder ) p
(is) K n
(80) # () N
(81) # () S
() p 8 T () S
(component) K
( bcd_full_adder ) p
(is) K n
(82) # () S
() p 8 T () S 16 T () S
(port) K
(\() p n
(83) # () S 8 T () S 16 T () S 24 T (val_1 : ) S
(IN) K
(  std_logic_vector\(3 ) p
(downto) K
( 0\);) p n
(84) # () S 8 T () S 16 T () S 24 T (val_2 : ) S
(IN) K
(  std_logic_vector\(3 ) p
(downto) K
( 0\);) p n
(85) # () S 8 T () S 16 T () S 24 T (c_in : ) S
(IN) K
(  std_logic;) p n
(86) # () S 8 T () S 16 T () S 24 T (result : ) S
(OUT) K
(  std_logic_vector\(3 ) p
(downto) K
( 0\);) p n
(87) # () S 8 T () S 16 T () S 24 T (c_out : ) S
(OUT) K
(  std_logic) p n
(88) # () S 8 T () S 16 T (\);) N
(89) # () S 8 T () S
(end) K
( ) p
(component) K
(;) p n
(90) # () S 8 T () N
(91) # () S 8 T () S
(signal) K
( ripple : std_logic_vector\(1 ) p
(downto) K
( 0\);) p n
(92) # () S
(begin) K n
(93) # () N
(94) # () S
() p 8 T (lst_sig: bcd_full_adder ) S
(port) K
( ) p
(map) K
(\() p n
(95) # () S 8 T () S 16 T (val_1 => val_1\(3 ) S
(downto) K
( 0\),) p n
(96) # () S 8 T () S 16 T (val_2 => val_2\(3 ) S
(downto) K
( 0\),) p n
(97) # () S 8 T () S 16 T (c_in) S 24 T (=> c_in,) N
(98) # () S 8 T () S 16 T (result) S 24 T (=> result\(3 ) S
(downto) K
( 0\),) p n
(99) # () S 8 T () S 16 T (c_out) S 24 T (=> ripple\(0\)) N
(100) # () S 8 T (\);) N
(101) # () N
(102) # () S 8 T (middle: bcd_full_adder ) S
(port) K
( ) p
(map) K
(\() p n
(103) # () S 8 T () S 16 T (val_1 => val_1\(7 ) S
(downto) K
( 4\),) p n
(104) # () S 8 T () S 16 T (val_2 => val_2\(7 ) S
(downto) K
( 4\),) p n
(105) # () S 8 T () S 16 T (c_in) S 24 T (=> ripple\(0\),) N
(106) # () S 8 T () S 16 T (result) S 24 T (=> result\(7 ) S
(downto) K
( 4\),) p n
(107) # () S 8 T () S 16 T (c_out) S 24 T (=> ripple\(1\)) N
(108) # () S 8 T (\);) N
(109) # () S 8 T () N
(110) # () S 8 T (mst_sig: bcd_full_adder ) S
(port) K
( ) p
(map) K
(\() p n
(111) # () S 8 T () S 16 T (val_1 => val_1\(11 ) S
(downto) K
( 8\),) p n
(112) # () S 8 T () S 16 T (val_2 => val_2\(11 ) S
(downto) K
( 8\),) p n
(113) # () S 8 T () S 16 T (c_in) S 24 T (=> ripple\(1\),) N
(114) # () S 8 T () S 16 T (result) S 24 T (=> result\(11 ) S
(downto) K
( 8\),) p n
(115) # () S 8 T () S 16 T (c_out) S 24 T (=> c_out) N
(116) # () S 8 T (\);) N
(117) # () S 8 T () N
(118) # () S
(end) K
( Behavioral;) p n
(119) # () N
(120) # () N
(121) # () N
(122) # () N
(123) # () N
(124) # () N
(125) # () S
(library ) K
(IEEE) l
(;) p n
(126) # () S
(use) K
( IEEE.STD_LOGIC_1164.) p
(ALL) K
(;) p n
(127) # () N
(128) # () S
(entity) K
( ) p
(dpd_adder) l
( ) p
(is) K n
(129) # () S
() p 8 T () S
(port) K
(\() p n
(130) # () S 8 T () S 16 T (dpd_val_1) S 32 T (: ) S
(in) K
( std_logic_vector\(9 ) p
(downto) K
( 0\);) p n
(131) # () S 8 T () S 16 T (dpd_val_2) S 32 T (: ) S
(in) K
( std_logic_vector\(9 ) p
(downto) K
( 0\);) p n
(132) # () S 8 T () S 16 T (c_in) S 24 T () S 32 T () S 40 T (: ) S
(in) K
( std_logic;) p n
(133) # () S 8 T () S 16 T (bcd_result) S 32 T (: ) S
(out) K
( std_logic_vector\(11 ) p
(downto) K
( 0\);) p n
(134) # () S 8 T () S 16 T (c_out) S 24 T () S 32 T () S 40 T (: ) S
(out) K
( std_logic) p n
(135) # () S 8 T (\);) N
(136) # () S
(end) K
( dpd_adder;) p n
(137) # () N
(138) # () S
(architecture) K
( Behavioral ) p
(of) K
( dpd_adder ) p
(is) K n
(139) # () N
(140) # () S
() p 8 T () S
(component) K
( dpd_to_bcd ) p
(is) K n
(141) # () S
() p 8 T () S 16 T () S
(port) K
(\() p n
(142) # () S 8 T () S 16 T () S 24 T (b) S 32 T (: ) S
(in) K
( std_logic_vector\(9 ) p
(downto) K
( 0\);) p n
(dpd_adder.vhd) (Page 2/3) (May 21, 12 13:21) title
border
grestore
(Printed by Christopher Wong) rhead
(dpd_adder.vhd) (2/5) (Monday May 21, 2012) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(143) # () p 8 T () S 16 T () S 24 T (d0) S 32 T (: ) S
(out) K
( std_logic_vector\(3 ) p
(downto) K
( 0\);) p n
(144) # () S 8 T () S 16 T () S 24 T (d1) S 32 T (: ) S
(out) K
( std_logic_vector\(3 ) p
(downto) K
( 0\);) p n
(145) # () S 8 T () S 16 T () S 24 T (d2) S 32 T (: ) S
(out) K
( std_logic_vector\(3 ) p
(downto) K
( 0\)) p n
(146) # () S 8 T () S 16 T (\);) N
(147) # () S 8 T () S
(end) K
( ) p
(component) K
(;) p n
(148) # () N
(149) # () S 8 T () S
(component) K
( bcd_3_digit_adder ) p
(is) K n
(150) # () S
() p 8 T () S 16 T () S
(port) K
(\() p n
(151) # () S 8 T () S 16 T () S 24 T (val_1 : ) S
(IN) K
(  std_logic_vector\(11 ) p
(downto) K
( 0\);) p n
(152) # (         val_2 : ) S
(IN) K
(  std_logic_vector\(11 ) p
(downto) K
( 0\);) p n
(153) # (         c_in : ) S
(IN) K
(  std_logic;) p n
(154) # (         result : ) S
(OUT) K
(  std_logic_vector\(11 ) p
(downto) K
( 0\);) p n
(155) # (         c_out : ) S
(OUT) K
(  std_logic) p n
(156) # () S 8 T () S 16 T (\);) N
(157) # () S 8 T () S
(end) K
( ) p
(component) K
(;) p n
(158) # () S 8 T () N
(159) # () S 8 T () S
(signal) K
( val_1_d0 : std_logic_vector\(3 ) p
(downto) K
( 0\);) p n
(160) # () S 8 T () S
(signal) K
( val_1_d1 : std_logic_vector\(3 ) p
(downto) K
( 0\);) p n
(161) # () S 8 T () S
(signal) K
( val_1_d2 : std_logic_vector\(3 ) p
(downto) K
( 0\);) p n
(162) # () S 8 T () S
(signal) K
( bcd_val_1 : std_logic_vector\(11 ) p
(downto) K
( 0\);) p n
(163) # () S 8 T () N
(164) # () S 8 T () S
(signal) K
( val_2_d0 : std_logic_vector\(3 ) p
(downto) K
( 0\);) p n
(165) # () S 8 T () S
(signal) K
( val_2_d1 : std_logic_vector\(3 ) p
(downto) K
( 0\);) p n
(166) # () S 8 T () S
(signal) K
( val_2_d2 : std_logic_vector\(3 ) p
(downto) K
( 0\);) p n
(167) # () S 8 T () S
(signal) K
( bcd_val_2 : std_logic_vector\(11 ) p
(downto) K
( 0\);) p n
(168) # () S 8 T () N
(169) # () S
(begin) K n
(170) # () N
(171) # () S
() p 8 T (dpd1: dpd_to_bcd ) S
(port) K
( ) p
(map) K
(\() p n
(172) # () S 8 T () S 16 T (b => dpd_val_1,) N
(173) # () S 8 T () S 16 T (d0 => val_1_d0,) N
(174) # () S 8 T () S 16 T (d1 => val_1_d1,) N
(175) # () S 8 T () S 16 T (d2 => val_1_d2) N
(176) # () S 8 T (\);) N
(177) # () S 8 T () N
(178) # () S 8 T (dpd2: dpd_to_bcd ) S
(port) K
( ) p
(map) K
(\() p n
(179) # () S 8 T () S 16 T (b => dpd_val_2,) N
(180) # () S 8 T () S 16 T (d0 => val_2_d0,) N
(181) # () S 8 T () S 16 T (d1 => val_2_d1,) N
(182) # () S 8 T () S 16 T (d2 => val_2_d2) N
(183) # () S 8 T (\);) N
(184) # () N
(185) # () S 8 T (bcd_val_1 <= val_1_d2 & val_1_d1 & val_1_d0;) N
(186) # () S 8 T (bcd_val_2 <= val_2_d2 & val_2_d1 & val_2_d0;) N
(187) # () S 8 T () N
(188) # () S 8 T (adder: bcd_3_digit_adder ) S
(port) K
( ) p
(map) K
(\() p n
(189) # () S 8 T () S 16 T (val_1 => bcd_val_1,) N
(190) # () S 8 T () S 16 T (val_2 => bcd_val_2,) N
(191) # () S 8 T () S 16 T (c_in) S 24 T (=> c_in,) N
(192) # () S 8 T () S 16 T (result => bcd_result,) N
(193) # () S 8 T () S 16 T (c_out) S 24 T (=> c_out) N
(194) # () S 8 T (\);) N
(195) # () S 8 T () N
(196) # () S
(end) K
( Behavioral;) p n
(197) # () N
(dpd_adder.vhd) (Page 3/3) (May 21, 12 13:21) title
border
grestore
(Printed by Christopher Wong) rhead
(dpd_adder.vhd) (3/5) (Monday May 21, 2012) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (--------------------------------------------------------------------------------) c n
0 T (--) N
(2) # (--Names: Chris Wong , Allen Yu) N
(3) # (--Login:  wongc, yua) N
(4) # (--Email: cwong030@student.ucr.edu , yua@cs.ucr.edu) N
(5) # (--Lab Section: 022) N
(6) # (--Assignment: Lab 5) N
(7) # (--I acknowledge all content is original.) N
(8) # (--------------------------------------------------------------------------------) N
0 T (--) N
(9) # () N
(10) # () S
(library ) K
(IEEE) l
(;) p n
(11) # () S
(use) K
( IEEE.STD_LOGIC_1164.) p
(ALL) K
(;) p n
(12) # () N
(13) # () S
(entity) K
( ) p
(dpd_to_bcd) l
( ) p
(is) K n
(14) # () S
() p 8 T () S
(port) K
(\() p n
(15) # () S 8 T () S 16 T (b) S 24 T (: ) S
(in) K
( std_logic_vector\(9 ) p
(downto) K
( 0\);) p n
(16) # () S 8 T () S 16 T (d0) S 24 T (: ) S
(out) K
( std_logic_vector\(3 ) p
(downto) K
( 0\);) p n
(17) # () S 8 T () S 16 T (d1) S 24 T (: ) S
(out) K
( std_logic_vector\(3 ) p
(downto) K
( 0\);) p n
(18) # () S 8 T () S 16 T (d2) S 24 T (: ) S
(out) K
( std_logic_vector\(3 ) p
(downto) K
( 0\)) p n
(19) # () S 8 T (\);) N
(20) # () S
(end) K
( dpd_to_bcd;) p n
(21) # () N
(22) # () S
(architecture) K
( Behavioral ) p
(of) K
( dpd_to_bcd ) p
(is) K n
(23) # () N
(24) # () S
() p 8 T () S
(signal) K
( d0_sig ) p 24 T (: std_logic_vector\( 3 ) S
(downto) K
( 0 \);) p n
(25) # () S 8 T () S
(signal) K
( d1_sig) p 24 T (: std_logic_vector\( 3 ) S
(downto) K
( 0 \);) p n
(26) # () S 8 T () S
(signal) K
( d2_sig) p 24 T (: std_logic_vector\( 3 ) S
(downto) K
( 0 \);) p n
(27) # () S 8 T () N
(28) # () S
(begin) K n
(29) # () S
() p 8 T () S
(process) K
(\( b \)) p n
(30) # () S 8 T () S 16 T () S
(begin) K n
(31) # () S
() p 8 T () S 16 T () S 24 T () S
(if) K
(\( b\(3\) = ') p
(0) str
(' \) ) p
(then) K n
(32) # () S
() p 8 T () S 16 T () S 24 T () S 32 T (d0_sig <= ") S
(0) str
(" & b\( 2 ) p
(downto) K
( 0 \);) p n
(33) # () S 8 T () S 16 T () S 24 T () S 32 T (d1_sig <= ") S
(0) str
(" & b\( 6 ) p
(downto) K
( 4 \);) p n
(34) # () S 8 T () S 16 T () S 24 T () S 32 T (d2_sig <= ") S
(0) str
(" & b\( 9 ) p
(downto) K
( 7 \);) p n
(35) # () S 8 T () S 16 T () S 24 T () S
(elsif) K
(\( b\( 3 ) p
(downto) K
( 1 \) = ") p
(100) str
(" \) ) p
(then) K n
(36) # () S
() p 8 T () S 16 T () S 24 T () S 32 T (d0_sig <= ") S
(100) str
(" & b\(0\);) p n
(37) # () S 8 T () S 16 T () S 24 T () S 32 T (d1_sig <= ") S
(0) str
(" & b\( 6 ) p
(downto) K
( 4 \);) p n
(38) # () S 8 T () S 16 T () S 24 T () S 32 T (d2_sig <= ") S
(0) str
(" & b\( 9 ) p
(downto) K
( 7 \);) p n
(39) # () S 8 T () S 16 T () S 24 T () S
(elsif) K
(\( b\( 3 ) p
(downto) K
( 1 \) = ") p
(101) str
(" \) ) p
(then) K n
(40) # () S
() p 8 T () S 16 T () S 24 T () S 32 T (d0_sig <= ") S
(0) str
(" & b\( 6 ) p
(downto) K
( 5 \) & b\( 0 \);) p n
(41) # () S 8 T () S 16 T () S 24 T () S 32 T (d1_sig <= ") S
(100) str
(" & b\( 4 \);) p n
(42) # () S 8 T () S 16 T () S 24 T () S 32 T (d2_sig <= ") S
(0) str
(" & b\( 9 ) p
(downto) K
( 7 \);) p n
(43) # () S 8 T () S 16 T () S 24 T () S
(elsif) K
(\( b\( 3 ) p
(downto) K
( 1 \) = ") p
(110) str
(" \) ) p
(then) K n
(44) # () S
() p 8 T () S 16 T () S 24 T () S 32 T (d0_sig <= ") S
(0) str
(" & b\( 9 ) p
(downto) K
( 8 \) & b\( 0 \);) p n
(45) # () S 8 T () S 16 T () S 24 T () S 32 T (d1_sig <= ") S
(0) str
(" & b\( 6 ) p
(downto) K
( 4 \);) p n
(46) # () S 8 T () S 16 T () S 24 T () S 32 T (d2_sig <= ") S
(100) str
(" & b\( 7 \);) p n
(47) # () S 8 T () S 16 T () S 24 T () S
(elsif) K
(\( b\( 3 ) p
(downto) K
( 1 \) = ") p
(111) str
(" ) p
(and) K
( b\( 6 ) p
(downto) K
( 5 \) = ") p
(10) str
() p n
0 T (" \) ) S
(then) K n
(48) # () S
() p 8 T () S 16 T () S 24 T () S 32 T (d0_sig <= ") S
(100) str
(" & b\( 0 \);) p n
(49) # () S 8 T () S 16 T () S 24 T () S 32 T (d1_sig <= ") S
(100) str
(" & b\( 4 \);) p n
(50) # () S 8 T () S 16 T () S 24 T () S 32 T (d2_sig <= ") S
(0) str
(" & b\( 9 ) p
(downto) K
( 7 \);) p n
(51) # () S 8 T () S 16 T () S 24 T () S
(elsif) K
(\( b\( 3 ) p
(downto) K
( 1 \) = ") p
(111) str
(" ) p
(and) K
( b\( 6 ) p
(downto) K
( 5 \) = ") p
(01) str
() p n
0 T (" \) ) S
(then) K n
(52) # () S
() p 8 T () S 16 T () S 24 T () S 32 T (d0_sig <= ") S
(100) str
(" & b\( 0 \);) p n
(53) # () S 8 T () S 16 T () S 24 T () S 32 T (d1_sig <= ") S
(0) str
(" & b\( 9 ) p
(downto) K
( 8 \) & b\( 4 \);) p n
(54) # () S 8 T () S 16 T () S 24 T () S 32 T (d2_sig <= ") S
(100) str
(" & b\( 7 \);) p n
(55) # () S 8 T () S 16 T () S 24 T () S
(elsif) K
(\( b\( 3 ) p
(downto) K
( 1 \) = ") p
(111) str
(" ) p
(and) K
( b\( 6 ) p
(downto) K
( 5 \) = ") p
(00) str
() p n
0 T (" \) ) S
(then) K n
(56) # () S
() p 8 T () S 16 T () S 24 T () S 32 T (d0_sig <= ") S
(0) str
(" & b\( 9 ) p
(downto) K
( 8 \) & b\( 0 \);) p n
(57) # () S 8 T () S 16 T () S 24 T () S 32 T (d1_sig <= ") S
(100) str
(" & b\( 4 \);) p n
(58) # () S 8 T () S 16 T () S 24 T () S 32 T (d2_sig <= ") S
(100) str
(" & b\( 7 \);) p n
(59) # () S 8 T () S 16 T () S 24 T () S
(elsif) K
(\( b\( 3 ) p
(downto) K
( 1 \) = ") p
(111) str
(" ) p
(and) K
( b\( 6 ) p
(downto) K
( 5 \) = ") p
(11) str
() p n
0 T (" \) ) S
(then) K n
(60) # () S
() p 8 T () S 16 T () S 24 T () S 32 T (d0_sig <= ") S
(100) str
(" & b\( 0 \);) p n
(61) # () S 8 T () S 16 T () S 24 T () S 32 T (d1_sig <= ") S
(100) str
(" & b\( 4 \);) p n
(62) # () S 8 T () S 16 T () S 24 T () S 32 T (d2_sig <= ") S
(100) str
(" & b\( 7 \);) p n
(63) # () S 8 T () S 16 T () S 24 T () S
(else) K n
(64) # () S
() p 8 T () S 16 T () S 24 T () S 32 T (d0_sig <= ") S
(0000) str
(";) p n
(65) # () S 8 T () S 16 T () S 24 T () S 32 T (d1_sig <= ") S
(0000) str
(";) p n
(66) # () S 8 T () S 16 T () S 24 T () S 32 T (d2_sig <= ") S
(0000) str
(";) p n
(67) # () S 8 T () S 16 T () S 24 T () S
(end) K
( ) p
(if) K
(;) p n
(dpd_to_bcd.vhd) (Page 1/2) (May 21, 12 13:21) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(68) # () p 8 T () S 16 T () S
(end) K
( ) p
(process) K
(;) p n
(69) # () N
(70) # () S 8 T () S 16 T (d0 <= d0_sig;) N
(71) # () S 8 T () S 16 T (d1 <= d1_sig;) N
(72) # () S 8 T () S 16 T (d2 <= d2_sig;) N
(73) # () S 8 T () S 16 T () N
(74) # () S
(end) K
( Behavioral;) p n
(75) # () N
(dpd_to_bcd.vhd) (Page 2/2) (May 21, 12 13:21) title
border
grestore
(Printed by Christopher Wong) rhead
(dpd_to_bcd.vhd) (4/5) (Monday May 21, 2012) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (--------------------------------------------------------------------------------) c n
0 T (--) N
(2) # (--Names: Chris Wong , Allen Yu) N
(3) # (--Login:  wongc, yua) N
(4) # (--Email: cwong030@student.ucr.edu , yua@cs.ucr.edu) N
(5) # (--Lab Section: 022) N
(6) # (--Assignment: Lab 5) N
(7) # (--I acknowledge all content is original.) N
(8) # (--------------------------------------------------------------------------------) N
0 T (--) N
(9) # () N
(10) # () S
(LIBRARY ) K
(ieee) l
(;) p n
(11) # () S
(USE) K
( ieee.std_logic_1164.) p
(ALL) K
(;) p n
(12) # ( ) N
(13) # () S
(ENTITY) K
( ) p
(dpd_adder_tb) l
( ) p
(IS) K n
(14) # (END) S
( dpd_adder_tb;) p n
(15) # ( ) N
(16) # () S
(ARCHITECTURE) K
( behavior ) p
(OF) K
( dpd_adder_tb ) p
(IS) K
( ) p n
(17) # ( ) N
(18) # (    ) S
(COMPONENT) K
( dpd_adder) p n
(19) # (    ) S
(PORT) K
(\() p n
(20) # (         dpd_val_1 : ) S
(IN) K
(  std_logic_vector\(9 ) p
(downto) K
( 0\);) p n
(21) # (         dpd_val_2 : ) S
(IN) K
(  std_logic_vector\(9 ) p
(downto) K
( 0\);) p n
(22) # (         c_in : ) S
(IN) K
(  std_logic;) p n
(23) # (         bcd_result : ) S
(OUT) K
(  std_logic_vector\(11 ) p
(downto) K
( 0\);) p n
(24) # (         c_out : ) S
(OUT) K
(  std_logic) p n
(25) # (        \);) N
(26) # (    ) S
(END) K
( ) p
(COMPONENT) K
(;) p n
(27) # () N
(28) # (   ) S
(signal) K
( dpd_val_1 : std_logic_vector\(9 ) p
(downto) K
( 0\) := \() p
(others) K
( => ') p
(0) str
('\);) p n
(29) # (   ) S
(signal) K
( dpd_val_2 : std_logic_vector\(9 ) p
(downto) K
( 0\) := \() p
(others) K
( => ') p
(0) str
('\);) p n
(30) # (   ) S
(signal) K
( c_in : std_logic := ') p
(0) str
(';) p n
(31) # (   ) S
(signal) K
( bcd_result : std_logic_vector\(11 ) p
(downto) K
( 0\);) p n
(32) # (   ) S
(signal) K
( c_out : std_logic;) p n
(33) # ( ) N
(34) # () S
(BEGIN) K n
(35) # () N
(36) # () S
(   uut: dpd_adder ) p
(PORT) K
( ) p
(MAP) K
( \() p n
(37) # (          dpd_val_1 => dpd_val_1,) N
(38) # (          dpd_val_2 => dpd_val_2,) N
(39) # (          c_in => c_in,) N
(40) # (          bcd_result => bcd_result,) N
(41) # (          c_out => c_out) N
(42) # (        \);) N
(43) # () N
(44) # (   sim_proc: ) S
(process) K n
(45) # () S
(   ) p
(begin) K
() p 16 T () S 24 T () N
(46) # () S 8 T () S 16 T () S
(-- 999 + 001) c n
(47) # () S
() p 8 T () S 16 T (dpd_val_1 <= ") S
(0011111111) str
(";) p n
(48) # () S 8 T () S 16 T (dpd_val_2 <= ") S
(0000000001) str
(";) p n
(49) # () S 8 T () S 16 T (c_in <= ') S
(0) str
(';) p n
(50) # () S 8 T () S 16 T () S
(wait) K
( ) p
(for) K
( 10 ns;) p n
(51) # () S 8 T () S 16 T () N
(52) # () S 8 T () S 16 T () S
(-- 999 + 000 + \(1\)) c n
(53) # () S
() p 8 T () S 16 T (dpd_val_1 <= ") S
(0011111111) str
(";) p n
(54) # () S 8 T () S 16 T (dpd_val_2 <= ") S
(0000000000) str
(";) p n
(55) # () S 8 T () S 16 T (c_in <= ') S
(1) str
(';) p n
(56) # () S 8 T () S 16 T () S
(wait) K
( ) p
(for) K
( 10 ns;) p n
(57) # () S 8 T () S 16 T () N
(58) # () S 8 T () S 16 T () S
(-- 732 + 108) c n
(59) # () S
() p 8 T () S 16 T (dpd_val_1 <= ") S
(1110110010) str
(";) p n
(60) # () S 8 T () S 16 T (dpd_val_2 <= ") S
(0010001000) str
(";) p n
(61) # () S 8 T () S 16 T (c_in <= ') S
(0) str
(';) p n
(62) # () S 8 T () S 16 T () S
(wait) K
( ) p
(for) K
( 10 ns;) p n
(63) # () S 8 T () S 16 T () N
(64) # () S 8 T () S 16 T () S
(-- 091 + 806) c n
(65) # () S
() p 8 T () S 16 T (dpd_val_1 <= ") S
(0000011011) str
(";) p n
(66) # () S 8 T () S 16 T (dpd_val_2 <= ") S
(1100001100) str
(";) p n
(67) # () S 8 T () S 16 T (c_in <= ') S
(0) str
(';) p n
(68) # () S 8 T () S 16 T () S
(wait) K
( ) p
(for) K
( 10 ns;) p n
(69) # (      ) S
(wait) K
(;) p n
(70) # (   ) S
(end) K
( ) p
(process) K
(;) p n
(71) # () N
(lab5_tb.vhd) (Page 1/2) (May 21, 12 13:22) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(72) # (END) K
(;) p n
(73) # () N
(74) # () N
(75) # () N
(76) # () N
(77) # () N
(78) # () S
(-- TestBench For dpd_to_bcd converter) c n
(79) # (-- ---------- ---------- --------- ----------- ---------- ----------) N
(80) # () S
(LIBRARY ) K
(ieee) l
(;) p n
(81) # () S
(USE) K
( ieee.std_logic_1164.) p
(ALL) K
(;) p n
(82) # ( ) N
(83) # () S
(ENTITY) K
( ) p
(dpd_to_bcd_tb) l
( ) p
(IS) K n
(84) # (END) S
( dpd_to_bcd_tb;) p n
(85) # ( ) N
(86) # () S
(ARCHITECTURE) K
( behavior ) p
(OF) K
( dpd_to_bcd_tb ) p
(IS) K
( ) p n
(87) # ( ) N
(88) # (    ) S
(COMPONENT) K
( dpd_to_bcd) p n
(89) # (    ) S
(PORT) K
(\() p n
(90) # (         b : ) S
(IN) K
(  std_logic_vector\(9 ) p
(downto) K
( 0\);) p n
(91) # (         d0 : ) S
(OUT) K
(  std_logic_vector\(3 ) p
(downto) K
( 0\);) p n
(92) # (         d1 : ) S
(OUT) K
(  std_logic_vector\(3 ) p
(downto) K
( 0\);) p n
(93) # (         d2 : ) S
(OUT) K
(  std_logic_vector\(3 ) p
(downto) K
( 0\)) p n
(94) # (        \);) N
(95) # (    ) S
(END) K
( ) p
(COMPONENT) K
(;) p n
(96) # (    ) N
(97) # (   ) S
(signal) K
( b : std_logic_vector\(9 ) p
(downto) K
( 0\) := \() p
(others) K
( => ') p
(0) str
('\);) p n
(98) # (   ) S
(signal) K
( d0 : std_logic_vector\(3 ) p
(downto) K
( 0\);) p n
(99) # (   ) S
(signal) K
( d1 : std_logic_vector\(3 ) p
(downto) K
( 0\);) p n
(100) # (   ) S
(signal) K
( d2 : std_logic_vector\(3 ) p
(downto) K
( 0\);) p n
(101) # ( ) N
(102) # () S
(BEGIN) K n
(103) # () S
(   uut: dpd_to_bcd ) p
(PORT) K
( ) p
(MAP) K
( \() p n
(104) # (          b => b,) N
(105) # (          d0 => d0,) N
(106) # (          d1 => d1,) N
(107) # (          d2 => d2) N
(108) # (        \);) N
(109) # () N
(110) # (   sim_proc: ) S
(process) K n
(111) # () S
(   ) p
(begin) K
() p 16 T () S 24 T () N
(112) # (      ) N
(113) # () S 8 T () S 16 T () S
(-- Test Case\(s\): Three small digits) c n
(114) # () S
() p 8 T () S 16 T (b <= ") S
(1111100101) str
("; ) p
(-- \(765\)) c n
(115) # () S
() p 8 T () S 16 T () S
(wait) K
( ) p
(for) K
( 10 ns;) p n
(116) # () S 8 T () S 16 T () N
(117) # () S 8 T () S 16 T () S
(-- Test Case\(s\): Two small digits, one large ) c n
(118) # () S
() p 8 T () S 16 T (b <= ") S
(1111101000) str
("; ) p
(-- \(768\)) c n
(119) # () S
() p 8 T () S 16 T () S
(wait) K
( ) p
(for) K
( 10 ns;) p n
(120) # () S 8 T () S 16 T (b <= ") S
(0010111010) str
("; ) p
(-- \(192\)) c n
(121) # () S
() p 8 T () S 16 T () S
(wait) K
( ) p
(for) K
( 10 ns;) p n
(122) # () S 8 T () S 16 T (b <= ") S
(1010001100) str
("; ) p
(-- \(904\)) c n
(123) # () S
() p 8 T () S 16 T () S
(wait) K
( ) p
(for) K
( 10 ns;) p n
(124) # () S 8 T () S 16 T () N
(125) # () S 8 T () S 16 T () S
(-- Test Case\(s\): One small digit, two large) c n
(126) # () S
() p 8 T () S 16 T (b <= ") S
(1010001110) str
("; ) p
(-- \(984\)) c n
(127) # () S
() p 8 T () S 16 T () S
(wait) K
( ) p
(for) K
( 10 ns;) p n
(128) # () S 8 T () S 16 T (b <= ") S
(1011011110) str
("; ) p
(-- \(598\)) c n
(129) # () S
() p 8 T () S 16 T () S
(wait) K
( ) p
(for) K
( 10 ns;) p n
(130) # () S 8 T () S 16 T (b <= ") S
(1100101111) str
("; ) p
(-- \(869\)) c n
(131) # () S
() p 8 T () S 16 T () S
(wait) K
( ) p
(for) K
( 10 ns;) p n
(132) # () S 8 T () S 16 T () N
(133) # () S 8 T () S 16 T () S
(-- Test Case\(s\): Three large digits) c n
(134) # () S
() p 8 T () S 16 T (b <= ") S
(1111111111) str
("; ) p
(-- \(999\)) c n
(135) # () S
() p 8 T () S 16 T () S
(wait) K
( ) p
(for) K
( 10 ns;) p n
(136) # () S 8 T () S 16 T (b <= ") S
(0001101110) str
("; ) p
(-- \(888\)) c n
(137) # () S
() p 8 T () S 16 T () S
(wait) K
( ) p
(for) K
( 10 ns;) p n
(138) # () N
(139) # (      ) S
(wait) K
(;) p n
(140) # (   ) S
(end) K
( ) p
(process) K
(;) p n
(141) # () N
(142) # () S
(END) K
(;) p n
(lab5_tb.vhd) (Page 2/2) (May 21, 12 13:22) title
border
grestore
(Printed by Christopher Wong) rhead
(lab5_tb.vhd) (5/5) (Monday May 21, 2012) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF

%!PS-Adobe-3.0
%%Title: lab2_report.txt, lab2_vhdl.vhd, lab2_tb.vhd, part1.s, Makefile
%%For: Christopher Wong
%%Creator: a2ps version 4.13
%%CreationDate: Thu Apr 26 13:37:21 2012
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 5
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% composite fonts for ASCII-EUC mixed string
% Version 1.2 1/31/1990
% Orignal Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.060185 def
/cw 4.236111 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 86.400000 mul
def
/ph
   520.335631 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 5 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (Names: James Fang, Chris Wong) p n
(2) # (Login: jfang003, wongc) N
(3) # (Email: jfang003@ucr.edu, cwong030@ucr.edu) N
(4) # (Lab Section: 0##) N
(5) # (Assignment: Lab #2) N
(6) # (I acknowledge all content is original.) N
(7) # () N
(8) # (I. Lab objective) N
(9) # (The objective of this lab is to become familiar with fixed and floating point) N
(10) # (representations of numbers. It also included becoming more familiar with) N
(11) # (MIPS and VHDL. ) N
(12) # () N
(13) # (II . Personal contributions) N
(14) # (Both me and my partner worked on both parts of the code.In both parts of the) N
(15) # (assignment, both of us wrote down on paper how to convert fixed to floating) N
(16) # (and floating to fixed to create an algorithm.  ) N
(17) # () N
(18) # (III. Skill learned & knowledge gained.) N
(19) # (Overall me and my partner learned about new functions in VHDL such as ) N
(20) # (conv_int. Also we learned how to use MIPS \(opcodes and what they do\)) N
(21) # (and it refreshed us on how assembly code works.) N
(22) # () N
(23) # (IV. Known bugs locations) N
(24) # (For each test case, you must wait 20 seconds between each test case for the) N
(25) # (output to show up properly.  Also for the MIPS part, we could not get it to) N
(26) # (work for negative test cases.) N
(27) # () N
(28) # (V. Feedback on the lab) N
(29) # (This lab was helpful in becoming familiar with VHDL and MIPS. We learned) N
(30) # (about various new data types and functions in VHDL.) N
(lab2_report.txt) (Page 1/1) (Apr 26, 12 13:26) title
border
grestore
(Printed by Christopher Wong) rhead
(lab2_report.txt) (1/5) (Thursday April 26, 2012) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (----------------------------------------------------------------------) c n
(2) # (--Names: James Fang, Chris Wong) N
(3) # (--Login: jfang003, wongc) N
(4) # (--Email: jfang003@ucr.edu, cwong030@ucr.edu) N
(5) # (--Lab Section: 0##) N
(6) # (--Assignment: Lab #2) N
(7) # (--I acknowledge all content is original.) N
(8) # (---------------------------------------------------------------------) N
(9) # () N
(10) # (--Load libraries) N
(11) # () S
(library ) K
(IEEE) l
(;) p n
(12) # () S
(use) K
( IEEE.STD_LOGIC_1164.) p
(ALL) K
(;) p n
(13) # () S
(use) K
( IEEE.NUMERIC_BIT.) p
(ALL) K
(;) p n
(14) # () S
(use) K
( ieee.std_logic_unsigned.) p
(all) K
(;) p n
(15) # () S
(use) K
( ieee.std_logic_arith.) p
(all) K
(;) p n
(16) # () N
(17) # () S
(--Declare enity with its inputs and outputs) c n
(18) # () S
(entity) K
( ) p
(lab2_vhdl) l
( ) p
(is) K n
(19) # () S
(    ) p
(Port) K
( \( floating : ) p
(in) K
(  STD_LOGIC_vector\(31 ) p
(downto) K
( 0\);) p n
(20) # (           fixed : ) S
(out) K
(  STD_LOGIC_vector\(31 ) p
(downto) K
( 0\)) p n
(21) # () S 8 T () S 16 T () S 24 T (  \);) N
(22) # () S
(end) K
( lab2_vhdl;) p n
(23) # () N
(24) # () S
(--Declare signals \('wires'\) ) c n
(25) # () S
(architecture) K
( Behavioral ) p
(of) K
( lab2_vhdl ) p
(is) K n
(26) # (signal) S
( flag: std_logic;) p n
(27) # () S
(signal) K
( exponent: std_logic_vector\(7 ) p
(downto) K
( 0\);) p n
(28) # () S
(signal) K
( exponent1: std_logic_vector\(7 ) p
(downto) K
( 0\);) p n
(29) # () S
(signal) K
( exponent2: std_logic_vector\(7 ) p
(downto) K
( 0\);) p n
(30) # () S
(signal) K
( man: std_logic_vector\(23 ) p
(downto) K
( 0\);) p n
(31) # () S
(constant) K
( val: std_logic_vector\(7 ) p
(downto) K
( 0\) := ") p
(10000111) str
(";) p n
(32) # () S
(signal) K
( temp_sig: std_logic;) p n
(33) # () S
(signal) K
( result: std_logic_vector\(31 ) p
(downto) K
( 0\);) p n
(34) # () S
(signal) K
( result2: std_logic_vector\(31 ) p
(downto) K
( 0\);) p n
(35) # () S
(signal) K
( shifts: integer;) p n
(36) # () S
(constant) K
( ZEROS: std_logic_vector\(31 ) p
(downto) K
( 0\) := \() p
(others) K
( => ') p
(0) str
('\);) p n
(37) # () N
(38) # () S
(begin) K n
(39) # () N
(40) # () S
(--Process #1: chop up the input into sign flag, exponenet, and man.) c n
(41) # () S
(extract: ) p
(process) K
(\(floating\)) p n
(42) # () S 8 T () S
(begin) K n
(43) # () S
() p 8 T () S 16 T () S
(if) K
(\(floating\(31\)=') p
(1) str
('\) ) p
(then) K
( ) p
(--Set the sign flag to t/f) c n
(44) # () S
() p 8 T () S 16 T () S 24 T (flag <= ') S
(1) str
(';) p n
(45) # () S 8 T () S 16 T () S
(else) K
( ) p n
(46) # () S 8 T () S 16 T () S 24 T (flag <= ') S
(0) str
(';) p n
(47) # () S 8 T () S 16 T () S
(end) K
( ) p
(if) K
(;) p n
(48) # () S 8 T () S 16 T () S
(--set shift right) c n
(49) # () S
() p 8 T () S 16 T (exponent1 <= val - floating\(30 ) S
(downto) K
( 23\);) p n
(50) # () S 8 T () S 16 T () S
(--set shift left) c n
(51) # () S
() p 8 T () S 16 T (exponent2 <= floating\(30 ) S
(downto) K
( 23\) - val;) p n
(52) # () S 8 T () S 16 T (man <= ") S
(1) str
(" & floating\(22 ) p
(downto) K
( 0\);) p 56 T () S
(--set mantissa) c n
(53) # () S
() p 8 T () S 16 T () N
(54) # () S
(end) K
( ) p
(process) K
(;) p n
(55) # () N
(56) # () S
(--Process #2: figure out to shift either left or right) c n
(57) # () S
(compute:) p
(process) K
(\(exponent1, exponent2\)) p n
(58) # () S 8 T () S
(begin) K n
(59) # () S
() p 8 T () S 16 T () S
(if) K
(\(exponent1\(7\)=') p
(1) str
('\) ) p
(then) K n
(60) # () S
() p 8 T () S 16 T () S 24 T (temp_sig <= ') S
(1) str
(';) p n
(61) # () S 8 T () S 16 T () S 24 T (shifts <= conv_integer\(exponent2\);) S
(--set left shift) c n
(62) # () S
() p 8 T () S 16 T () S
(else) K n
(63) # () S
() p 8 T () S 16 T () S 24 T (temp_sig <= ') S
(0) str
(';) p n
(64) # () S 8 T () S 16 T () S 24 T (shifts <= conv_integer\(exponent1\);) S
(--set right shift) c n
(65) # () S
() p 8 T () S 16 T () S
(end) K
( ) p
(if) K
(;) p n
(66) # () S 8 T () S 16 T () N
(67) # () S
(end) K
( ) p
(process) K
(;) p n
(68) # () N
(69) # () S
(--Process #3: shift the mantissa the correct direction and amount) c n
(70) # () S
(shift:) p
(process) K
(\(shifts,man,temp_sig\)) p n
(71) # () S 8 T () S
(begin) K n
(72) # () S
() p 8 T () S 16 T (result <= ZEROS;) N
(73) # () S 8 T () S 16 T () S
(if) K
(\(shifts > 23\) ) p
(then) K
() p 40 T () S
(--right shift overload) c n
(lab2_vhdl.vhd) (Page 1/2) (Apr 26, 12 13:36) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(74) # () p 8 T () S 16 T () S 24 T (result <= ZEROS;) N
(75) # () S 8 T () S 16 T () S
(elsif) K
(\(shifts <= 23 ) p
(and) K
( temp_sig = ') p
(0) str
('\) ) p
(then) K
(  ) p
(--right shift) c n
(76) # () S
() p 8 T () S 16 T () S 24 T (result <=  ZEROS\(7 ) S
(downto) K
( 0\) & ZEROS\(\(shifts-1\) ) p n
(77) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(downto) K
( 0\) & man\(23 ) p
(downto) K
( shifts\);) p n
(78) # () S 8 T () S 16 T () S
(elsif) K
(\(shifts >= 6 ) p
(and) K
( temp_sig = ') p
(1) str
('\) ) p
(then) K
( ) p
(--left shift) c n
(79) # () S
() p 8 T () S 16 T () S 24 T (result <= ') S
(0) str
(' & man\(\(30-shifts\) ) p
(downto) K
( 0\) ) p n
(80) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (   & ZEROS\(\(shifts-1\) ) S
(downto) K
( 0\);) p n
(81) # () S 8 T () S 16 T () S
(elsif) K
(\(shifts < 6 ) p
(and) K
( temp_sig = ') p
(1) str
('\) ) p
(then) K
(  ) p
(--left shift) c n
(82) # () S
() p 8 T () S 16 T () S 24 T (result <=  ZEROS\(7 ) S
(downto) K
( shifts\) & ) p n
(83) # () S 8 T () S 16 T () S 24 T () S 32 T (man\(23 ) S
(downto) K
( 0\) & ZEROS\(shifts ) p
(downto) K
( 1\);) p n
(84) # () S 8 T () S 16 T () S
(else) K n
(85) # () S
() p 8 T () S 16 T () S
(end) K
( ) p
(if) K
(;) p n
(86) # () N
(87) # () S
(end) K
( ) p
(process) K
(;) p n
(88) # () N
(89) # () S
(--Process #4: convert to negative if necessary) c n
(90) # () S
(flip:) p
(process) K
(\(result,flag\)) p n
(91) # () S
(begin) K n
(92) # () S
() p 8 T () S
(if) K
(\(flag = ') p
(1) str
('\) ) p
(then) K n
(93) # () S
() p 8 T () S 16 T (result2 <= \() S
(not) K
( result\) + 1;) p 48 T () S
(--not\(result\) + 1) c n
(94) # () S
() p 8 T () S
(else) K n
(95) # () S
() p 8 T () S 16 T (result2 <= result;) N
(96) # () S 8 T () S
(end) K
( ) p
(if) K
(;) p n
(97) # () S 8 T () N
(98) # () S
(end) K
( ) p
(process) K
(;) p n
(99) # () N
(100) # (fixed <= result2;) S
(--assign temporary signal to the output port) c n
(101) # () N
(102) # () S
(end) K
( Behavioral;) p n
(103) # () N
(lab2_vhdl.vhd) (Page 2/2) (Apr 26, 12 13:36) title
border
grestore
(Printed by Christopher Wong) rhead
(lab2_vhdl.vhd) (2/5) (Thursday April 26, 2012) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (--------------------------------------------------------------------------------) c n
0 T (--) N
(2) # (--Names: James Fang, Chris Wong) N
(3) # (--Login: jfang003, wongc) N
(4) # (--Email: jfang003@ucr.edu, cwong030@ucr.edu) N
(5) # (--Lab Section: 0##) N
(6) # (--Assignment: Lab #2) N
(7) # (--I acknowledge all content is original.) N
(8) # (--------------------------------------------------------------------------------) N
0 T (--) N
(9) # () S
(LIBRARY ) K
(ieee) l
(;) p n
(10) # () S
(USE) K
( ieee.std_logic_1164.) p
(ALL) K
(;) p n
(11) # ( ) N
(12) # () S
(ENTITY) K
( ) p
(lab2_tb) l
( ) p
(IS) K n
(13) # (END) S
( lab2_tb;) p n
(14) # ( ) N
(15) # () S
(ARCHITECTURE) K
( behavior ) p
(OF) K
( lab2_tb ) p
(IS) K
( ) p n
(16) # ( ) N
(17) # (    ) S
(-- Component Declaration for the Unit Under Test \(UUT\)) c n
(18) # () S
( ) p n
(19) # (    ) S
(COMPONENT) K
( lab2_vhdl) p n
(20) # (    ) S
(PORT) K
(\() p n
(21) # (         floating : ) S
(IN) K
(  std_logic_vector\(31 ) p
(downto) K
( 0\);) p n
(22) # (         fixed : ) S
(OUT) K
(  std_logic_vector\(31 ) p
(downto) K
( 0\)) p n
(23) # (        \);) N
(24) # (    ) S
(END) K
( ) p
(COMPONENT) K
(;) p n
(25) # (    ) N
(26) # () N
(27) # (   ) S
(--Inputs) c n
(28) # () S
(   ) p
(signal) K
( floating : std_logic_vector\(31 ) p
(downto) K
( 0\) := \() p
(others) K
( => ') p
(0) str
('\);) p n
(29) # () N
(30) # ( ) S 8 T () S
(--Outputs) c n
(31) # () S
(   ) p
(signal) K
( fixed : std_logic_vector\(31 ) p
(downto) K
( 0\);) p n
(32) # (   ) S
(-- No clocks detected in port list. Replace <clock> below with ) c n
(33) # () S
(   ) p
(-- appropriate port name ) c n
(34) # () S
( ) p n
(35) # ( ) N
(36) # () S
(BEGIN) K n
(37) # () S
( ) p n
(38) # () S 8 T () S
(-- Instantiate the Unit Under Test \(UUT\)) c n
(39) # () S
(   uut: lab2_vhdl ) p
(PORT) K
( ) p
(MAP) K
( \() p n
(40) # (          floating => floating,) N
(41) # (          fixed => fixed) N
(42) # (        \);) N
(43) # () N
(44) # (   ) S
(-- Clock process definitions) c n
(45) # () N
(46) # () S
(   ) p
(-- Stimulus process) c n
(47) # () S
(   stim_proc: ) p
(process) K n
(48) # () S
(   ) p
(begin) K
() p 16 T () S 24 T () N
(49) # (      ) S
(wait) K
( ) p
(for) K
( 20ns;) p n
(50) # () S 8 T () S 16 T () N
(51) # () S 8 T () S 16 T () S
(---------------------------------------------------------) c n
(52) # () S
() p 8 T () S 16 T () S
(--Test1) c n
(53) # () S
() p 8 T () S 16 T () S
(---------------------------------------------------------) c n
(54) # () S
() p 8 T () S 16 T () S
(report) K
( ") p
(Test case 1) str
(";) p n
(55) # () S 8 T () S 16 T (floating <=  ") S
(01000001000001000000000000000000) str
(";) p n
(56) # () S 8 T () S 16 T () S
(wait) K
( ) p
(for) K
( 20ns;) p n
(57) # () S 8 T () S 16 T () S
(assert) K
( fixed=") p
(00000000000001000010000000000000) str
(" ) p n
(58) # () S 8 T () S 16 T () S
(report) K
( ") p
(Test_1: fixed) str
(" ) p
(severity) K
( Warning;) p n
(59) # () S 8 T () S 16 T () N
(60) # () S 8 T () S 16 T () S
(---------------------------------------------------------) c n
(61) # () S
() p 8 T () S 16 T () S
(--Test2) c n
(62) # () S
() p 8 T () S 16 T () S
(---------------------------------------------------------) c n
(63) # () S
() p 8 T () S 16 T () S
(report) K
( ") p
(Test case 2) str
(";) p n
(64) # () S 8 T () S 16 T (floating <=  ") S
(01000100100000000001000000000000) str
(";) p n
(65) # () S 8 T () S 16 T () S
(wait) K
( ) p
(for) K
( 20ns;) p n
(66) # () S 8 T () S 16 T () S
(assert) K
( fixed=") p
(00000010000000000100000000000000) str
(" ) p n
(67) # () S 8 T () S 16 T () S
(report) K
( ") p
(Test_2: fixed) str
(" ) p
(severity) K
( Warning; ) p n
(68) # () S 8 T () S 16 T () N
(69) # () S 8 T () S 16 T () S
(---------------------------------------------------------) c n
(70) # () S
() p 8 T () S 16 T () S
(--Test3) c n
(71) # () S
() p 8 T () S 16 T () S
(---------------------------------------------------------) c n
(lab2_tb.vhd) (Page 1/2) (Apr 26, 12 12:25) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(72) # () p 8 T () S 16 T () S
(report) K
( ") p
(Test case 3) str
(";) p n
(73) # () S 8 T () S 16 T (floating <=  ") S
(01001000100000000000000000010000) str
(";) p n
(74) # () S 8 T () S 16 T () S
(wait) K
( ) p
(for) K
( 20ns;) p n
(75) # () S 8 T () S 16 T () S
(assert) K
( fixed=") p
(00000000000000000100000000000000) str
(" ) p n
(76) # () S 8 T () S 16 T () S
(report) K
( ") p
(Test_3: fixed) str
(" ) p
(severity) K
( Warning;) p n
(77) # () S 8 T () S 16 T () N
(78) # () S 8 T () S 16 T () S
(---------------------------------------------------------) c n
(79) # () S
() p 8 T () S 16 T () S
(--Test4) c n
(80) # () S
() p 8 T () S 16 T () S
(---------------------------------------------------------) c n
(81) # () S
() p 8 T () S 16 T () S
(report) K
( ") p
(Test case 4) str
(";) p n
(82) # () S 8 T () S 16 T (floating <=  ") S
(01001010100000000000000000000001) str
(";) p n
(83) # () S 8 T () S 16 T () S
(wait) K
( ) p
(for) K
( 20ns;) p n
(84) # () S 8 T () S 16 T () S
(assert) K
( fixed=") p
(00000000000000000100000000000000) str
(" ) p n
(85) # () S 8 T () S 16 T () S
(report) K
( ") p
(Test_4: fixed) str
(" ) p
(severity) K
( Warning;) p n
(86) # () S 8 T () S 16 T () N
(87) # () S 8 T () S 16 T () S
(---------------------------------------------------------) c n
(88) # () S
() p 8 T () S 16 T () S
(--Test5) c n
(89) # () S
() p 8 T () S 16 T () S
(---------------------------------------------------------) c n
(90) # () S
() p 8 T () S 16 T () S
(report) K
( ") p
(Test case 5) str
(";) p n
(91) # () S 8 T () S 16 T (floating <=  ") S
(00111010100000000000000000000000) str
(";) p n
(92) # () S 8 T () S 16 T () S
(wait) K
( ) p
(for) K
( 20ns;) p n
(93) # () S 8 T () S 16 T () S
(assert) K
( fixed=") p
(00000000000000000000000000100000) str
(" ) p n
(94) # () S 8 T () S 16 T () S
(report) K
( ") p
(Test_5: fixed) str
(" ) p
(severity) K
( Warning;) p n
(95) # () S 8 T () S 16 T () N
(96) # () S 8 T () S 16 T () S
(---------------------------------------------------------) c n
(97) # () S
() p 8 T () S 16 T () S
(--Test6) c n
(98) # () S
() p 8 T () S 16 T () S
(---------------------------------------------------------) c n
(99) # () S
() p 8 T () S 16 T () S
(report) K
( ") p
(Test case 6) str
(";) p n
(100) # () S 8 T () S 16 T (floating <= ") S
(00110111100000000000000000000000) str
(";) p n
(101) # () S 8 T () S 16 T () S
(wait) K
( ) p
(for) K
( 20ns;) p n
(102) # () S 8 T () S 16 T () S
(assert) K
( fixed=") p
(00000000000000000000000000000000) str
(" ) p n
(103) # () S 8 T () S 16 T () S
(report) K
( ") p
(Test_6: fixed) str
(" ) p
(severity) K
( Warning;) p n
(104) # () S 8 T () S 16 T () N
(105) # () S 8 T () S 16 T () N
(106) # () S 8 T () S 16 T () S
(---------------------------------------------------------) c n
(107) # () S
() p 8 T () S 16 T () S
(--Test7) c n
(108) # () S
() p 8 T () S 16 T () S
(---------------------------------------------------------) c n
(109) # () S
() p 8 T () S 16 T () S
(report) K
( ") p
(Test case 7) str
(";) p n
(110) # () S 8 T () S 16 T (floating <=  ") S
(11000001000001000000000000000000) str
(";) p n
(111) # () S 8 T () S 16 T () S
(wait) K
( ) p
(for) K
( 20ns;) p n
(112) # () S 8 T () S 16 T () S
(assert) K
( fixed=") p
(11111111111110111110000000000000) str
(" ) p n
(113) # () S 8 T () S 16 T () S
(report) K
( ") p
(Test_7: fixed) str
(" ) p
(severity) K
( Warning;) p n
(114) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T ( ) N
(115) # (      ) S
(wait) K
(;) p n
(116) # (   ) S
(end) K
( ) p
(process) K
(;) p n
(117) # () N
(118) # () S
(END) K
(;) p n
(lab2_tb.vhd) (Page 2/2) (Apr 26, 12 12:25) title
border
grestore
(Printed by Christopher Wong) rhead
(lab2_tb.vhd) (3/5) (Thursday April 26, 2012) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (#Names: James Fang, Chris Wong) p n
(2) # (#Login: jfang003, wongc) N
(3) # (#Email: jfang003@ucr.edu, cwong030@ucr.edu) N
(4) # (#Lab Section: 0##) N
(5) # (#Assignment: Lab #2) N
(6) # (#I acknowledge all content is original.) N
(7) # () N
(8) # () S
(.text) K n
(9) # (.globl) S
( main) p n
(10) # () N
(11) # (main:) N
(12) # (    subu $sp, $sp, 32) N
(13) # (    sw $ra, 20\($sp\)) N
(14) # (    sw $fp, 16\($sp\)) N
(15) # (    addiu $fp, $sp, 28) N
(16) # () N
(17) # (#====================================================================) N
(18) # (#User interface) N
(19) # (#====================================================================) N
(20) # () N
(21) # (#==== PHASE 1: GET USER INPUTs ======) N
(22) # (li $v0, 4                   #output string to console) N
(23) # (la $a0, STR1) N
(24) # (syscall) N
(25) # () N
(26) # (li $v0, 5                   #get first input from user) N
(27) # (syscall                     #s0 <- user input \(binary pnt\)) N
(28) # (add $s0, $v0, $zero) N
(29) # () N
(30) # (li $v0, 4                   #output string to console) N
(31) # (la $a0, STR2) N
(32) # (syscall) N
(33) # () N
(34) # (li $v0, 5                   #get second input from user) N
(35) # (syscall                     #s1 <- user input \(fixed number\)) N
(36) # (add $s1, $v0, $zero) N
(37) # () N
(38) # () N
(39) # (#==== PHASE 2: GETTING SIGNED BIT =====) N
(40) # (bgtz $s1, POS               #If signed is positive, go to positive block) N
(41) # (addi $s7, $zero, 1          #else, invert the bits) N
(42) # (sll $s7, $s7, 31) N
(43) # (addi $t5, $zero, -1) N
(44) # (xor $s1, $s1, $t5           #s1 <- NOT\(s1\) +1) N
(45) # (j NEXT) N
(46) # () N
(47) # (POS:) N
(48) # (add $s7, $zero, $zero       #s7 <- signed bit flag) N
(49) # () N
(50) # (NEXT:) N
(51) # () N
(52) # () N
(53) # (#==== PHASE 3: SETTING MAN. and EXPONENT =======) N
(54) # () N
(55) # (add $t2, $zero, $zero       #t2 <- i \(initialize at 0\)) N
(56) # (addi $t1, $zero, 32         #t1 <- 32) N
(57) # (addi $s2, $zero, 1          #s2 <- the mask) N
(58) # () N
(59) # (LOOP1:) N
(60) # (    ) S
(beq) K
( $t2, $t1, ENDLOOP1  #for\(int i = 0; i < 32; i++\)) p n
(61) # (    and $s3, $s2, $s1       #s3 <- s2 & s1) N
(62) # (    ) S
(beq) K
( $s3, $zero, CONT    #if s3 == 0 go to cont') p n
(63) # (    add $s4, $t2, $zero     #s4 <- t2) N
(64) # (    CONT:) N
(65) # (    addi $t2, $t2, 1        #increment t2) N
(66) # (    sll $s2, $s2, 1         #left shift s2 by 1) N
(67) # (    j LOOP1                 #repeat loop) N
(68) # (ENDLOOP1:) N
(69) # () N
(70) # (addi $t4, $zero, 127        #t4 <- set base 127 to exponent) N
(71) # (add $t4, $t4, $s4           #t4 <- 127 + s4) N
(72) # (sub $t4, $t4, $s0           #t4 <- t4 - binary pnt) N
(73) # () N
(part1.s) (Page 1/2) (Apr 26, 12 12:34) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(74) # (addi $t6, $zero, 511        #mask t6 to set other bits to zero) p n
(75) # (sll $t6, $t6, 23) N
(76) # (addi $t5, $zero, -1) N
(77) # (xor $t6, $t6, $t5) N
(78) # () N
(79) # (addi $t7, $zero, 23         #move mantica to approprate place) N
(80) # (sub $t7, $t7, $s4) N
(81) # (sll $t5, $s1, $t7) N
(82) # (and $t5, $t5, $t6) N
(83) # () N
(84) # (sll $t4, $t4, 23            #shift exponent to appropriate place) N
(85) # (add $s5, $zero, $zero) N
(86) # (or $s5, $s5, $t5            #OR all the parts together) N
(87) # (or $s5, $s5, $t4            #s5 <- signed bit ) S
(| exponent | man) c n
(88) # () S
(or $s5, $s5, $s7) p n
(89) # () N
(90) # (li $v0,1                    #output s5 to console) N
(91) # (add $a0, $s5, $zero) N
(92) # (syscall) N
(93) # (li $v0, 4) N
(94) # (la $a0, NEWLINE) N
(95) # (syscall) N
(96) # () N
(97) # (li $v0, 10                  #call halt \(end program\)) N
(98) # (syscall) N
(99) # () N
(100) # (#====================================================================) N
(101) # (#Data Block) N
(102) # (#====================================================================) N
(103) # () S
(.data) K n
(104) # () S
(STR1:) p n
(105) # (    .asciiz "Enter the location of the binary point: ") N
(106) # (STR2:) N
(107) # (    .asciiz "Enter the 32-bit fixed point number: ") N
(108) # (NEWLINE:) N
(109) # (    .asciiz "\\n") N
(part1.s) (Page 2/2) (Apr 26, 12 12:34) title
border
grestore
(Printed by Christopher Wong) rhead
(part1.s) (4/5) (Thursday April 26, 2012) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (# To generate the turnin, type "make all".) c n
(2) # (# To run other commands type "make <command>". I.E. "make turnin".) N
(3) # (# To remove the executeable and any extraneous files type "make clean" at) N
(4) # (# the command prompt.) N
(5) # (###############################################################################) N
(6) # (#Variable to hold lab number) N
(7) # () S
(LABNUM) l
(=2) p n
(8) # () N
(9) # () S
(#Variable to hold first lastname) c n
(10) # () S
(LASTNAME1) l
(=wong) p n
(11) # () N
(12) # () S
(#Variable to hold second lastname) c n
(13) # () S
(LASTNAME2) l
(=fang) p n
(14) # () N
(15) # () S
(#Variable of Tarball generated) c n
(16) # () S
(TAR) l
(=lab$\(LABNUM\)_$\(LASTNAME1\)_$\(LASTNAME2\).tgz) p n
(17) # () N
(18) # () S
(#Variable of Post Script generated) c n
(19) # () S
(PSPRINT) l
(=lab$\(LABNUM\)_$\(LASTNAME1\)_$\(LASTNAME2\).ps) p n
(20) # () S
(PDFPRINT) l
(=lab$\(LABNUM\)_$\(LASTNAME1\)_$\(LASTNAME2\).pdf) p n
(21) # () N
(22) # () S
(#File hiearachy is lab$\(LABNUM\)_$\(PART\)$\(SUBPART\)$\(TESTBENCH\).$\(EXTENSION\)) c n
(23) # (#$\(LABNUM\)= lab number) N
(24) # (#$\(PART\)= if a lab part exists in order from 1 to infinity) N
(25) # (#$\(SUBPART\)= if other components were used to make this component that were) N
(26) # (#            not included then put them here in order from a to z. If "a") N
(27) # (#            requires sub parts then put "a"$\(subsubpart\) I.E. "a1" now) N
(28) # (#            numbering. Continue letter/number trend to infinity.) N
(29) # (#$\(TESTBENCH\)= if this is a test bench file then put "tb" to indicate it) N
(30) # (#              is test bench for this part) N
(31) # (#$\(EXTENSION\)= is the character file extension) N
(32) # () N
(33) # (#Files to be included in the PS/PDF print) N
(34) # () S
(FILES) l
(=lab2_report.txt lab2_vhdl.vhd lab2_tb.vhd part1.s Makefile) p n
(35) # () N
(36) # () S
(#Variable of to use G++ GNU compiler to compile C files) c n
(37) # () S
(COMPILER) l
(=gcc) p n
(38) # () N
(39) # () S
(# -g Produce debug information, necessary for debugging.) c n
(40) # (# -Wall ) S 16 T (Show all reasonable warnings...) N
(41) # (# -Werror Make all warnings into errors.) N
(42) # (# -ansi This flag tells the compiler to enforce ANSI C standards) N
(43) # (# -pedantic More pedantic ansi, warnings for stuff you probably didn't mean.) N
(44) # (# -O2 Optimize even more. GCC performs nearly all supported optimizations that) N
(45) # (#  do not involve a space-speed tradeoff. As compared to -O, this option) N
(46) # (#) S 8 T (increases both compilation time and the performance of the generated cod) N
0 T (e.) N
(47) # (# -O3 Optimize yet more. -O3 turns on all optimizations specified by -O2) N
(48) # (#  and also turns on the -finline-functions, -funswitch-loops,) N
(49) # (#  -fpredictive-commoning, -fgcse-after-reload, -ftree-vectorize and) N
(50) # (#  -fipa-cp-clone options.) N
(51) # () N
(52) # (#Variable of GCC Compiler flags) N
(53) # () S
(COMPILEFLAGS) l
(= -g -Wall -Werror -ansi -pedantic -O3) p n
(54) # () N
(55) # () S
(#Variable of Program name) c n
(56) # () S
(PROGRAM) l
(=genvhdl) p n
(57) # () N
(58) # () S
(#Targets) c n
(59) # (#Compile all, specifically first clean, print,) N
(60) # (# turnin, and compile in this order) N
(61) # () S
(all) L
(: clean print turnin) p n
(62) # () N
(63) # () S
(#Compile C code) c n
(64) # () S
(compile) L
(:) p n
(65) # () S 8 T ($\(COMPILER\) $\(COMPILEFLAGS\) -o $\(PROGRAM\) gen.c) N
(66) # () N
(67) # () S
(#Remove unnecessary files) c n
(68) # () S
(clean) L
(:) p n
(69) # () S 8 T (rm -rf *~ $\(PSPRINT\) $\(PDFPRINT\) $\(TAR\) $\(PROGRAM\)) N
(70) # () N
(71) # () S
(#Print files to a .ps document) c n
(72) # () S
(print) L
(:) p n
(Makefile) (Page 1/2) (Apr 26, 12 13:27) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(73) # () p 8 T (a2ps -M letter --line-numbers=1 -o $\(PSPRINT\) $\(FILES\)) N
(74) # () N
(75) # () S
(printpdf) L
(:) p n
(76) # () S 8 T (enscript -2 --fancy-header --line-numbers=1 --truncate-lines \\) N
(77) # () S 8 T (--word-wrap --style=emacs --tabsize=3 --landscape $\(FILES\) \\) N
(78) # () S 8 T (-o - | ps2pdfwr - $\(PDFPRINT\)) N
(79) # () N
(80) # () S
(#Create a tar ball for project turn in) c n
(81) # () S
(turnin) L
(:) p n
(82) # () S 8 T (tar -czvf $\(TAR\) $\(PSPRINT\) $\(FILES\)) N
(83) # () N
(Makefile) (Page 2/2) (Apr 26, 12 13:27) title
border
grestore
(Printed by Christopher Wong) rhead
(Makefile) (5/5) (Thursday April 26, 2012) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF

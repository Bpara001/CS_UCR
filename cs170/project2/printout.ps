%!PS-Adobe-3.0
%%Title: main.cpp, node.H, object.H
%%For: Christopher Wong
%%Creator: a2ps version 4.13
%%CreationDate: Wed Dec  5 22:20:20 2012
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 4
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% composite fonts for ASCII-EUC mixed string
% Version 1.2 1/31/1990
% Orignal Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.060185 def
/cw 4.236111 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 86.400000 mul
def
/ph
   520.335631 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 5 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (/* Course: CS 170 fall quarter , 2012) c n
(2) # ( First Name: Christopher) N
(3) # ( Last Name: Wong) N
(4) # ( Login id: wongc) N
(5) # ( email address: cwong030@student.ucr.edu) N
(6) # ( Student id: 860 923 521) N
(7) # () N
(8) # ( Assignment: Programming  Project 2) N
(9) # () N
(10) # ( I hereby certify that the code in this file) N
(11) # ( is ENTIRELY my own original work.) N
(12) # (========================================================================) N
(13) # (*/) N
(14) # (//main.cpp) N
(15) # () N
(16) # () S
(#include) K
( ") p
(node.H) str
(") p n
(17) # () S
(#include) K
( <fstream>) p n
(18) # () S
(#include) K
( <math.h>) p n
(19) # () N
(20) # () S
(//Global Varibles) c n
(21) # () S
(vector<Object> dataset; ) p
(//Structure to hold data) c n
(22) # () S
(Node solution; ) p
(//Structure to hold the solution) c n
(23) # () S
(int) k
( numf = 0; ) p
(//Number of features) c n
(24) # () S
(int) k
( numi = 0; ) p
(//Number of instances) c n
(25) # () N
(26) # (//Reads in the file,puts, all relevant data into the vector dataset.) N
(27) # (//Param: filename, the name of the file which to read in & analyze) N
(28) # () S
(void) k
( read_file\(string filename\){) p n
(29) # () N
(30) # () S 8 T (  ) S
(//open the file & check to see if its a valid file) c n
(31) # () S
() p 8 T (  string line; ifstream myfile; myfile.open\(filename.c_str\(\)\);) N
(32) # () S 8 T (  ) S
(if) K
(\(!myfile.is_open\(\)\){) p n
(33) # () S 8 T () S 16 T (  cout <<") S
(') str
("<<filename<< ") p
(' is not a valid file name. Exiting) str
("<< endl;) p n
(34) # () S 8 T () S 16 T (  exit\(1\);) N
(35) # () S 8 T (  }) N
(36) # () N
(37) # () S 8 T (  ) S
(//read the contents of the file) c n
(38) # () S
() p 8 T (  ) S
(while) K
( \( myfile.good\(\) \){) p n
(39) # () S 8 T () S 16 T (getline \(myfile,line\);) N
(40) # () S 8 T () S 16 T () S
(if) K
(\(line == ""\) ) p
(break) K
(;) p n
(41) # () N
(42) # () S 8 T () S 16 T () S
(//for each line, do this) c n
(43) # () S
() p 8 T () S 16 T () S
(double) k
( classnum = 0; vector<) p
(double) k
(> features;) p n
(44) # () S 8 T () S 16 T () S
(for) K
(\() p
(int) k
( i = 2; i < line.size\(\); i = i+16\){) p n
(45) # () N
(46) # () S 8 T () S 16 T () S 24 T () S
(//get the raw number) c n
(47) # () S
() p 8 T () S 16 T () S 24 T () S
(double) k
( n=atof\(line.substr\(i,9\).c_str\(\)\)*pow\(10,atof\(line) p n
0 T (.substr\(i+11,3\).c_str\(\)\)\);) N
(48) # () N
(49) # () S 8 T () S 16 T () S 24 T () S
(//Get the class number, or Get the feature) c n
(50) # () S
() p 8 T () S 16 T () S 24 T () S
(if) K
(\(i == 2\) classnum = n;) p n
(51) # () S 8 T () S 16 T () S 24 T () S
(else) K
( {features.push_back\(n\);}) p n
(52) # () S 8 T () S 16 T (}) N
(53) # () N
(54) # () S 8 T () S 16 T () S
(//put the object into the dataset & increment number of instance) c n
0 T (s) N
(55) # () S
() p 8 T () S 16 T (Object o\(classnum,features\); dataset.push_back\(o\);) N
(56) # () S 8 T () S 16 T (numi++;) N
(57) # () S 8 T (  }) N
(58) # () N
(59) # () S 8 T (  ) S
(//Get the number of features) c n
(60) # () S
() p 8 T (  numf = dataset[0].feature.size\(\);) N
(61) # () N
(62) # (    ) S
(//Close the file) c n
(63) # () S
(    myfile.close\(\);) p n
(64) # (}) N
(65) # () N
(66) # () S
(//Nearest Neighbor algorithim) c n
(67) # (//Parma: v, vector which holds all features of the unknown object,) N
(68) # (//) S 8 T () S 16 T ( v2, vector that holds which features are active in the calculat) N
0 T (ion) N
(69) # (//Returns: The predicted outcome for this object) N
(70) # () S
(double) k
( nn\(vector<) p
(double) k
(> v, vector<) p
(char) k
(> v2\){) p n
(main.cpp) (Page 1/4) (Dec 05, 12 22:17) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(71) # () p n
(72) # () S 8 T () S
(//calculate ecluid distance from each instance) c n
(73) # () S
() p 8 T () S
(double) k
( distance, lowest_class = -1, lowest = 0;) p n
(74) # () S 8 T () S
(for) K
(\() p
(int) k
( i = 0; i < dataset.size\(\); i++\){) p n
(75) # () S 8 T () S 16 T () S
(double) k
( subtotal = 0;) p n
(76) # () S 8 T () S 16 T () S
(for) K
(\() p
(int) k
( j = 0; j < numf; j++\)) p n
(77) # () S 8 T () S 16 T () S 24 T () S
(if) K
(\(v2[j]==1\)subtotal+= pow\(\(v[j]-dataset[i].feature[j]\),) p n
0 T (2\);) N
(78) # () S 8 T () S 16 T (distance = sqrt\(subtotal\); ) N
(79) # () N
(80) # () S 8 T () S 16 T () S
(//Determine if its the lowest number encountered) c n
(81) # () S
() p 8 T () S 16 T () S
(if) K
(\( \(lowest_class == -1 || distance < lowest\) && distance != 0 \)) p n
0 T ({) N
(82) # () S 8 T () S 16 T () S 24 T (lowest = distance; lowest_class = dataset[i].classnum;) N
(83) # () S 8 T () S 16 T (}) N
(84) # () S 8 T (}) N
(85) # () S 8 T () S
(return) K
( lowest_class; ) p
(//return which class is the closest neighbor) c n
(86) # () S
(}) p n
(87) # () N
(88) # () S
(//Does a cross validation check with the given active feature vector) c n
(89) # (//Param: active, vector indicating which features are used \( 0 or 1\)) N
(90) # (//Returns: Precentage of nearest neighbors that were correct) N
(91) # () S
(double) k
( do_cross_validation\(vector<) p
(char) k
(> active\){) p n
(92) # () S 8 T () S
(//run through the dataset and determine if its a correct guess) c n
(93) # () S
() p 8 T () S
(double) k
( num_correct = 0;) p n
(94) # () S 8 T () S
(for) K
(\() p
(int) k
( i = 0; i < numi; i++\)) p n
(95) # () S 8 T () S 16 T () S
(if) K
(\( nn\(dataset[i].feature,active\) == dataset[i].classnum\) num_co) p n
0 T (rrect++;) N
(96) # () S 8 T () S
(return) K
( \(num_correct / \() p
(double) k
(\)numi\); ) p
(//return % of correct answers) c n
(97) # () S
(}) p n
(98) # () N
(99) # () S
(//Integer to binary function,from \(http://www.cplusplus.com/forum/general/10898/) c n
0 T (\)) N
(100) # (//Param: n, a Integer needs to be convereted to binary) N
(101) # (//Returns: Binary in form of a string represeted with '0' and '1''s) N
(102) # () S
(string dec2bin\() p
(unsigned) k
( ) p
(long) k
( n \){) p n
(103) # (  string result;) N
(104) # (  ) S
(do) K
( result.push_back\( ') p
(0) str
(' + \(n & 1\) \);) p n
(105) # (  ) S
(while) K
( \(n >>= 1\);) p n
(106) # (  reverse\( result.begin\(\), result.end\(\) \);) N
(107) # (  ) S
(return) K
( result;) p n
(108) # (  }) N
(109) # () N
(110) # () S
(//Runs the foward selection or backward elimination algorithm) c n
(111) # (//Param: type, denotes which search to run; 0 <- foward, 1 <- backward) N
(112) # (//returns the solution to Node sol) N
(113) # () S
(void) k
( selection\() p
(int) k
( type = 0\){) p n
(114) # () S 8 T (vector<Node> tree;) N
(115) # () S 8 T () S
(int) k
( total = 0; ) p
(int) k
( activenum; ) p
(int) k
( unactivenum;) p n
(116) # () N
(117) # () S 8 T () S
(//Either run backward elimination or forward selection) c n
(118) # () S
() p 8 T () S
(if) K
(\(type == 0\) {unactivenum = 0; activenum = 1;}) p n
(119) # () S 8 T () S
(else) K
( {unactivenum = 1; activenum = 0;}) p n
(120) # () S 8 T (vector<) S
(char) k
(> active; ) p
(for) K
(\() p
(int) k
( i = 0; i < numf; i++\) active.push_back\(unac) p n
0 T (tivenum\);) N
(121) # () N
(122) # () S 8 T () S
(while) K
(\() p
(true) k
(\){) p n
(123) # () S 8 T () S 16 T (tree.clear\(\); ) S
(int) k
( pos = 0; ) p
(int) k
( modified = 0;) p
(//clear temp tree an) c n
0 T (d pos) N
(124) # () N
(125) # () S
() p 8 T () S 16 T () S
(//For each feature, do) c n
(126) # () S
() p 8 T () S 16 T () S
(for) K
(\() p
(int) k
( i = 0; i < numf; i++\){) p n
(127) # () S 8 T () S 16 T () S 24 T () S
(if) K
(\(active[i] == unactivenum\){) p n
(128) # () N
(129) # () S 8 T () S 16 T () S 24 T () S 32 T () S
(//activate a feature, do cross valid. check) c n
(130) # () S
() p 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
(\(total != 0\) active[i] = activenum ;) p n
(131) # () S 8 T () S 16 T () S 24 T () S 32 T () S
(double) k
( temp = do_cross_validation\(active\);) p n
(132) # () S 8 T () S 16 T () S 24 T () S 32 T (tree.push_back\(Node\(temp,active\)\);) N
(133) # () N
(134) # () S 8 T () S 16 T () S 24 T () S 32 T () S
(//output, check highest cross valid. results,dea) c n
0 T (ctive feature,) N
(135) # () S
() p 8 T () S 16 T () S 24 T () S 32 T (cout << ") S
(    Using Feature\(s\)) str
(" << tree[tree.size\(\)-1].s) p n
0 T (tring_activef\(\)) N
(main.cpp) (Page 2/4) (Dec 05, 12 22:17) title
border
grestore
(Printed by Christopher Wong) rhead
(main.cpp) (1/4) (Wednesday December 05, 2012) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(136) # () p 8 T () S 16 T () S 24 T () S 32 T (     << ") S
( accuracy is ) str
(" << temp * 100<< ") p
(%) str
(" << endl;) p n
(137) # () S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
(\(solution.cv < temp\){solution.cv = temp; solut) p n
0 T (ion.active = active;}) N
(138) # () S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
(\(tree[i].cv >= tree[pos].cv\) pos = i;) p n
(139) # () S 8 T () S 16 T () S 24 T () S 32 T (active[i] = unactivenum; total++; modified++;) N
(140) # () S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
(\(total == 1\) ) p
(break) K
(;) p n
(141) # () S 8 T () S 16 T () S 24 T (}) N
(142) # () S 8 T () S 16 T () S 24 T () S
(else) K
( tree.push_back\(Node\(\)\);) p n
(143) # () S 8 T () S 16 T (}) N
(144) # () N
(145) # () S 8 T () S 16 T () S
(if) K
(\(modified == 0\) ) p
(break) K
(; ) p
(//break out if needed) c n
(146) # () N
(147) # () S
() p 8 T () S 16 T () S
(//Get the features with the highest c.v check results) c n
(148) # () S
() p 8 T () S 16 T (active = tree[pos].active;) N
(149) # () S 8 T () S 16 T (cout << ") S
(Feature set) str
(" << tree[pos].string_activef\(\)) p n
(150) # () S 8 T () S 16 T () S 24 T ( <<") S
( is best, accuracy is ) str
("<<tree[pos].cv *100<<") p
(%) str
("<<endl;) p n
(151) # () S 8 T (}) N
(152) # (}) N
(153) # () N
(154) # () N
(155) # () S
(//Runs my customly made algorithm) c n
(156) # () S
(void) k
( suntinwong_algorithm\(\){) p n
(157) # () S 8 T (vector<) S
(char) k
(> active; ) p
(for) K
(\() p
(int) k
( i = 0; i < numf; i++\) active.push_back\(0\);) p n
(158) # () S 8 T (string s;) N
(159) # () S 8 T () N
(160) # () S 8 T () S
(//Go through a brute force search) c n
(161) # () S
() p 8 T () S
(for) K
(\() p
(unsigned) k
( ) p
(int) k
( i = 0; i < pow\(2.0,numf\); i++\){) p n
(162) # () S 8 T () S 16 T () S
(for) K
(\() p
(int) k
( j = 0; j< numf; j++\){) p n
(163) # () N
(164) # () S 8 T () S 16 T () S 24 T () S
(//Convert integer to binary, set active features) c n
(165) # () S
() p 8 T () S 16 T () S 24 T (s = dec2bin\(i\);) N
(166) # () S 8 T () S 16 T () S 24 T () S
(while) K
(\(s.size\(\) != numf\)  s = ") p
(0) str
(" + s;) p n
(167) # () S 8 T () S 16 T () S 24 T () S
(if) K
(\(s.substr\(j,1\) == ") p
(1) str
("\) active[j] = 1;) p n
(168) # () S 8 T () S 16 T () S 24 T () S
(else) K
( active[j] = 0;) p n
(169) # () S 8 T () S 16 T (}) N
(170) # () N
(171) # () S 8 T () S 16 T () S
(//Do cross validation check, output, set sol. if applicable) c n
(172) # () S
() p 8 T () S 16 T () S
(double) k
( temp = do_cross_validation\(active\); Node node\(temp,active) p n
0 T (\);) N
(173) # () S 8 T () S 16 T () S
(if) K
(\(solution.cv < temp\){solution.cv = temp; solution.active = act) p n
0 T (ive;}) N
(174) # () S 8 T () S 16 T (cout << ") S
(Feature set) str
("<<node.string_activef\(\) << ") p
( has an accuarcy of ) str
(") p n
(175) # () S 8 T () S 16 T () S 24 T ( << temp * 100 << ") S
(%) str
(" << endl;) p n
(176) # () N
(177) # () S 8 T (}) N
(178) # (}) N
(179) # () N
(180) # () S
(//Main function: Run specific search using cross valid. to find relevant feature) c n
0 T (s) N
(181) # () S
(int) k
( main\(\){) p n
(182) # () N
(183) # () S 8 T () S
(//Initialize and Read the user's file) c n
(184) # () S
() p 8 T (cout << ") S
(Welcome to SunTinWong's Feature Selection ALgorithm\\n) str
(") p n
(185) # () S 8 T () S 16 T ( << ") S
(Type in the name of the file to test: ) str
(" << endl;) p n
(186) # () S 8 T (string filename; cin >> filename;) N
(187) # () S 8 T (read_file\(filename\);) N
(188) # () N
(189) # () S 8 T () S
(//Determine which algorithm to run) c n
(190) # () S
() p 8 T (cout << ") S
(Type the number of the algorithm you want to run\\n) str
(") p n
(191) # () S 8 T (     << ") S
(1\)Foward Selection\\n2\)Backward Elimination\\n3\)SunTinWong's Algorithm) str
(") p n
(192) # () S 8 T (     << endl;) N
(193) # () S 8 T () S
(int) k
( input; cin >> input;) p n
(194) # () N
(195) # () S 8 T () S
(//output number of features and number of instances) c n
(196) # () S
() p 8 T (cout <<") S
(This dataset has ) str
("<<numf<<") p
( feature\(s\)\(not including class attrib\),with ) str
(") p n
(197) # () S 8 T (     << numi << ") S
( instance\(s\)) str
(" << endl;) p n
(198) # () N
(199) # () S 8 T () S
(//do the calculation) c n
(200) # () S
() p 8 T (cout << ") S
(\\nBeginning search.\\n) str
(" << endl;) p n
(201) # () S 8 T () S
(if) K
(\(input == 1\) selection\(0\);) p n
(202) # () S 8 T () S
(else) K
( ) p
(if) K
(\(input == 2\) selection\(1\);) p n
(203) # () S 8 T () S
(else) K
( ) p
(if) K
(\(input == 3\) suntinwong_algorithm\(\);) p n
(204) # () S 8 T () S
(else) K
( ) p
(return) K
( 0;) p n
(main.cpp) (Page 3/4) (Dec 05, 12 22:17) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(205) # () p n
(206) # () S 8 T () S
(//output the results) c n
(207) # () S
() p 8 T (cout << ") S
(\\nFinished search!! The best feature subset is ) str
(") p n
(208) # () S 8 T () S 16 T ( << solution.string_activef\(\) << ") S
(, which has an accuracy of ) str
(") p n
(209) # () S 8 T () S 16 T ( << solution.cv * 100 << ") S
(%) str
(" << endl << endl;) p n
(210) # (}) N
(main.cpp) (Page 4/4) (Dec 05, 12 22:17) title
border
grestore
(Printed by Christopher Wong) rhead
(main.cpp) (2/4) (Wednesday December 05, 2012) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (/* Course: CS 170 fall quarter , 2012) p n
(2) # ( First Name: Christopher) N
(3) # ( Last Name: Wong) N
(4) # ( Login id: wongc) N
(5) # ( email address: cwong030@student.ucr.edu) N
(6) # ( Student id: 860 923 521) N
(7) # () N
(8) # ( Assignment: Programming  Project 2) N
(9) # () N
(10) # ( I hereby certify that the code in this file) N
(11) # ( is ENTIRELY my own original work.) N
(12) # (========================================================================) N
(13) # (*/) N
(14) # (//node.H) N
(15) # () N
(16) # (#ifndef __NODE_H__) N
(17) # (#define __NODE_H__) N
(18) # (#include "object.H") N
(19) # (#include <sstream>) N
(20) # () N
(21) # (class Node {) N
(22) # () N
(23) # (    public:) N
(24) # () S 8 T (vector<char> active;) N
(25) # () S 8 T (double cv;) N
(26) # () S 8 T () N
(27) # (    //Defualt Constructor) N
(28) # (    Node\(\)) N
(29) # (    :cv\(-1\)) N
(30) # (    {}) N
(31) # (    ) N
(32) # (    Node\(double a\)) N
(33) # (    :cv\(a\)) N
(34) # (    {}) N
(35) # (    ) N
(36) # (    //Constructor with parameters) N
(37) # (    Node\(double a, vector<char> b\)) N
(38) # (    :active\(b\),cv\(a\)) N
(39) # (    {}) N
(40) # (    ) N
(41) # (    //Returns a string containing the active features in this node) N
(42) # (    string string_activef\(\){) N
(43) # () S 8 T () S 16 T (string s = "{";) N
(44) # () S 8 T () S 16 T (for\(int i = 0; i < active.size\(\); i++\){) N
(45) # () S 8 T () S 16 T () S 24 T (if\(active[i] == 1\){) N
(46) # () S 8 T () S 16 T () S 24 T () S 32 T (if\(s.size\(\) > 1\)s += ",";) N
(47) # () S 8 T () S 16 T () S 24 T () S 32 T (stringstream ss;) N
(48) # () S 8 T () S 16 T () S 24 T () S 32 T (ss << \(i+1\);) N
(49) # () S 8 T () S 16 T () S 24 T () S 32 T (s += ss.str\(\);) N
(50) # () S 8 T () S 16 T () S 24 T (}) N
(51) # () S 8 T () S 16 T (}) N
(52) # () S 8 T () S 16 T (return \(s + "}"\);) N
(53) # () S 8 T (}) N
(54) # () S 8 T () N
(55) # (};) N
(56) # (#endif) N
(node.H) (Page 1/1) (Dec 04, 12 11:59) title
border
grestore
(Printed by Christopher Wong) rhead
(node.H) (3/4) (Wednesday December 05, 2012) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (/* Course: CS 170 fall quarter , 2012) p n
(2) # ( First Name: Christopher) N
(3) # ( Last Name: Wong) N
(4) # ( Login id: wongc) N
(5) # ( email address: cwong030@student.ucr.edu) N
(6) # ( Student id: 860 923 521) N
(7) # () N
(8) # ( Assignment: Programming  Project 2) N
(9) # () N
(10) # ( I hereby certify that the code in this file) N
(11) # ( is ENTIRELY my own original work.) N
(12) # (========================================================================) N
(13) # (*/) N
(14) # (//object.h) N
(15) # () N
(16) # (#ifndef __OBJECT_H__) N
(17) # (#define __OBJECT_H__) N
(18) # (#include <iostream>) N
(19) # (#include <vector>) N
(20) # (using namespace std;) N
(21) # () N
(22) # (class Object {) N
(23) # () N
(24) # (    public:) N
(25) # () S 8 T (double classnum;  ) S 32 T () S 40 T (//the class number of the object) N
(26) # () S 8 T (vector<double> feature;) S 32 T (//all features for the object) N
(27) # () S 8 T () N
(28) # (    //Defualt Constructor) N
(29) # (    Object\(\)) N
(30) # (    :classnum\(-1\)) N
(31) # (    {}) N
(32) # (    ) N
(33) # (    //Constructor with parameters) N
(34) # (    Object\(double name, vector<double> features\)) N
(35) # (    :classnum\(name\),feature\(features\)) N
(36) # (    {}) N
(37) # () N
(38) # (};) N
(39) # (#endif) N
(object.H) (Page 1/1) (Nov 27, 12 22:37) title
border
grestore
(Printed by Christopher Wong) rhead
(object.H) (4/4) (Wednesday December 05, 2012) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
